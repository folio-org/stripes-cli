import path from 'path';
import fs from 'fs';
import http from 'http';
import express from 'express';
import logger from 'morgan';
import debug from 'debug';

//
// this is cribbed from files generated by express-generator for a new app,
// principally ./bin/www and ./app.js.
//

// error listener
function onError(options, error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + options.port
    : 'Port ' + options.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// event listener
function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Listening on ${bind}`);
  debug('Listening on ' + bind);
}


export function start(dir, options) {
  const app = express();
  app.use(express.static(dir, {}));
  app.use(logger('tiny'));

  const server = http.createServer(app);

  // Perform some basic checks to ensure we have a directory with something to serve
  if (!fs.existsSync(path.resolve(dir))) {
    console.log(`Directory "${dir}" does not exist.`);
    return;
  }
  if (!fs.existsSync(path.resolve(dir, 'index.html'))) {
    console.log(`Directory "${dir}" does not contain an index.html.`);
    return;
  }

  server.listen(options.port);
  server.on('error', (error) => onError(options, error));
  server.on('listening', () => onListening(server));
}
